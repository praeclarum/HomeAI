<svg width="@Width" height="@Height" viewBox="0 0 @Width @Height">
    <!-- Draw the backround
    <rect x="@padding" y="0" width="@Width" height="@(Height-padding)" fill="#EEE" />
     -->
    <!-- Draw the x-axis -->
    <line x1="@padding" y1="@(Height-padding)" x2="@Width" y2="@(Height-padding)" stroke="@axisColor" stroke-width="@axisWidth" />
    <text x="@((Width-padding)/2 + padding)" y="@(Height-textSize)" text-anchor="middle" font-size="@textSize" font-family="sans-serif" fill="black">@XLabel</text>
    <!-- Draw the y-axis -->
    <line x1="@padding" y1="0" x2="@padding" y2="@(Height-padding)" stroke="@axisColor" stroke-width="@axisWidth" />
    <text x="@padding" y="@((Height-padding)/2)" text-anchor="middle" font-size="@textSize" font-family="sans-serif" fill="black" transform="translate(-@(textSize/3), 0) rotate(-90 @padding @((Height-padding)/2))">@YLabel</text>
    <!-- Draw the data -->
    @{
        var i = 0; 
        foreach (var data in Data) {
            var pointsSvg = pointsSvgs[i];
            <polyline points="@pointsSvg" fill="none" stroke="@(colors[i])" stroke-width="@lineWidth" />
            <!-- Draw the data as points -->
            @foreach (var point in data)
            {
                var (x, y) = Project(point);
                <circle cx="@x" cy="@y" r="@(lineWidth*1.5)" fill="@(colors[i])"><title>@point</title></circle>
            }
            i++;
        }
    }
</svg>

@code {
    [Parameter] public int Width { get; set; }
    [Parameter] public int Height { get; set; }
    [Parameter] public string XLabel { get; set; } = "X";
    [Parameter] public string YLabel { get; set; } = "Y";
    [Parameter] public (double X, double Y)[][] Data { get; set; } = Array.Empty<(double X, double Y)[]>();

    static readonly string[] colors = new[] { "yellow", "green", "blue", "orange", "red", "purple", "black", "brown", "pink", "gray" };

    int axisWidth;
    int lineWidth;
    int padding = 32;
    int textSize = 16;

    string axisColor = "#999";
    string pointColor = "blue";

    List<string> pointsSvgs = new List<string>();

    double minX, minY;
    double dxdw, dydh;
    int iheight;

    (double, double) Project((double X, double Y) p) =>
        (padding + (p.X - minX) / dxdw, iheight - (p.Y - minY) / dydh);
 
    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        var iwidth = Width - padding;
        iheight = Height - padding;

        axisWidth = Math.Min(Width, Height) / 50;
        lineWidth = axisWidth;

        var dataWithPoints = Data.Where(d => d.Length > 0).ToArray();

        minX = dataWithPoints.Min(d => d.Min(p => p.X));
        var maxX = dataWithPoints.Max(d => d.Max(p => p.X));
        minY = dataWithPoints.Min(d => d.Min(p => p.Y));
        var maxY = dataWithPoints.Max(d => d.Max(p => p.Y));

        dxdw = (maxX - minX) / iwidth;
        dydh = (maxY - minY) / iheight;
        foreach (var data in Data) {
            if (data.Length == 0) {
                pointsSvgs.Add("");
                continue;
            }
            var points = data.Select(Project).Select(p => $"{p.Item1},{p.Item2}");
            pointsSvgs.Add(String.Join(" ", points));
        }
    }
}
