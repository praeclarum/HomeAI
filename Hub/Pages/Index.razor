@page "/"
@using AI

@inject HomeDatabase db;

<PageTitle>Home</PageTitle>

<h1>Home</h1>

@if (devices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var device in devices)
    {
        <h3>@device.Name</h3>
        if (deviceStatus.TryGetValue (device.Id, out var s))
        {
            <p>@s.Status</p>
            <p>Current: @s.CurrentTemperature.CelsiusToFahrenheit() ℉ (@s.CurrentTemperature ℃)</p>
            <p>Target: @s.SetTemperature.CelsiusToFahrenheit() ℉ (@s.SetTemperature ℃)</p>
            <p>Request: @s.LastRequestTemperature.CelsiusToFahrenheit() ℉ (@s.LastRequestTemperature ℃) @@ @s.LastRequestTemperatureTimestamp.ToLocalTime()</p>
            <StripChart Width="600" Height="200" Data="@s.TempReadings" XLabel="Time (minutes)" YLabel="Temperature (℉)" />
        }
    }
}

@code {
    private Device[]? devices;
    private Dictionary<Guid, DeviceInfo> deviceStatus = new Dictionary<Guid, DeviceInfo>();

    class DeviceInfo {
        public string Name { get; set; } = "";
        public string Status { get; set; } = "";
        public double CurrentTemperature { get; set; } = 0;
        public double SetTemperature { get; set; } = 0;
        public double LastRequestTemperature { get; set; } = 0;
        public DateTime LastRequestTemperatureTimestamp { get; set; }
        public (float X, float Y)[] TempReadings { get; set; } = Array.Empty<(float X, float Y)>();
    }

    private string newDeviceName = "";

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task Refresh()
    {
        devices = await db.GetDevicesAsync();
        StateHasChanged();
        var ai = new ThermostatAI();
        foreach (var device in devices)
        {
            var lastSetTemp = await db.GetThermostatUserSetpointAsync(device.Id);
            var now = DateTime.UtcNow;
            deviceStatus[device.Id] = new DeviceInfo {
                Status = await device.GetOnlineDisplayStatusAsync(db),
                CurrentTemperature =
                    (await db.GetThermostatReadingAsync(device.Id))?.Value ?? 0.0,
                SetTemperature = 
                    await ai.GetSetpointAsync(db, device.Id),
                LastRequestTemperature = lastSetTemp?.Value ?? 0.0,
                LastRequestTemperatureTimestamp = lastSetTemp?.Timestamp ?? DateTime.MinValue,
                TempReadings = (await db.GetThermostatReadingsAsync(device.Id, 100))
                    .Select(r => (X: (float)(r.Timestamp - now).TotalMinutes, Y: (float)r.Value.CelsiusToFahrenheit()))
                    .ToArray(),
            };
            StateHasChanged();
        }
    }
}

