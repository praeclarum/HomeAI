@page "/"
@using AI

@inject HomeDatabase db;

<PageTitle>Home</PageTitle>

<h1>Home</h1>

<p><a href="/backup/Home.db">Download Database Backup</a></p>

<OccupancyStatus />

@if (devices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var device in devices)
    {
        if (deviceStatus.TryGetValue (device.Id, out var s) && s.Status != DeviceStatus.Offline)
        {
            <h3><a href="/devices/@device.Id">@device.Name</a></h3>
            <DeviceInfoView DeviceInfo="@s" />
        }
    }
}

@code {
    private Hub.Data.Device[]? devices;
    private Dictionary<Guid, DeviceInfo> deviceStatus = new Dictionary<Guid, DeviceInfo>();

    private string newDeviceName = "";

    int displayMinutes = 12*60;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task Refresh()
    {
        @* Console.WriteLine($"Query for {displayMinutes} minutes"); *@
        devices = await db.GetDevicesAsync();
        StateHasChanged();
        var ai = new ThermostatAI();
        foreach (var device in devices)
        {
            var lastSetTemp = await db.GetThermostatUserSetpointAsync(device.Id);
            var now = DateTime.UtcNow;
            var states = (await DeviceStatesOverTime.LoadAsync(device.Id, displayMinutes, includeAwayData: true, db: db)).States.Where(s => s.HasAllData).ToArray();
            var minTime = states.Length > 0 ? states[0].Timestamp : now;
            deviceStatus[device.Id] = await DeviceInfo.LoadAsync(device.Id, displayMinutes, db);
            StateHasChanged();
        }
    }
}

