@page "/"
@using AI

@inject HomeDatabase db;

<PageTitle>Home</PageTitle>

<h1>Home</h1>

@if (devices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var device in devices)
    {
        <h3>@device.Name</h3>
        if (deviceStatus.TryGetValue (device.Id, out var s))
        {
            <p>@s.Status</p>
            <p>Current: @s.CurrentTemperature.CelsiusToFahrenheit() ℉ (@s.CurrentTemperature ℃)</p>
            <p>Target: @s.SetTemperature.CelsiusToFahrenheit() ℉ (@s.SetTemperature ℃)</p>
            <p>Request: @s.LastRequestTemperature.CelsiusToFahrenheit() ℉ (@s.LastRequestTemperature ℃) @@ @s.LastRequestTemperatureTimestamp.ToLocalTime()</p>
            <StripChart Width="600" Height="200" Data="@(new[]{s.AISetTemperaturesF, s.TempReadingsF})" XLabel="Time (minutes)" YLabel="Temperature (℉)" />
        }
    }
}

@code {
    private Device[]? devices;
    private Dictionary<Guid, DeviceInfo> deviceStatus = new Dictionary<Guid, DeviceInfo>();

    private string newDeviceName = "";

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task Refresh()
    {
        devices = await db.GetDevicesAsync();
        StateHasChanged();
        var ai = new ThermostatAI();
        foreach (var device in devices)
        {
            var lastSetTemp = await db.GetThermostatUserSetpointAsync(device.Id);
            var now = DateTime.UtcNow;
            var states = (await DeviceStatesOverTime.LoadAsync(device.Id, 24*60, db)).States.Where(s => s.HasAllData).ToArray();
            var minTime = states.Length > 0 ? states[0].Timestamp : now;
            deviceStatus[device.Id] = new DeviceInfo(device.Id) {
                Status = await device.GetOnlineDisplayStatusAsync(db),
                CurrentTemperature = states.Length > 0 ? states[^1].ThermostatReading : 0.0,
                SetTemperature = await (new ThermostatAI().GetSetpointAsync(db, device.Id)),
                LastRequestTemperature = lastSetTemp?.Value ?? 0.0,
                LastRequestTemperatureTimestamp = lastSetTemp?.Timestamp ?? DateTime.MinValue,
                TempReadingsF = states.Select(s => (
                    (s.Timestamp - minTime).TotalMinutes,
                    s.ThermostatReading.CelsiusToFahrenheit()
                )).ToArray(),
                AISetTemperaturesF = states.Select(s => (
                    (s.Timestamp - minTime).TotalMinutes,
                    s.AISetTemperature.CelsiusToFahrenheit()
                )).ToArray(),
                States = states,
            };
            StateHasChanged();
        }
    }
}

