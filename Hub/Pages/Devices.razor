@page "/devices"

@inject HomeDatabase db;

<PageTitle>Devices</PageTitle>

<h1>Devices</h1>

@if (devices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick=Refresh>Refresh</button>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Online</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in devices)
            {
                <tr>
                    <td><a href="/devices/@device.Id">@device.Name</a></td>
                    <td>@(deviceStatus.TryGetValue(device.Id, out var s) ? s : "")</td>
                </tr>
            }
        </tbody>
    </table>
    <p>Key: <input type="password" @bind="@writeKey" /></p>
    if (Secrets.CanWriteWithKey(writeKey))
    {
        <input type="text" @bind="@newDeviceName" />
        <button @onclick=AddDevice>Add</button>
    }
    
}

@code {
    private Hub.Data.Device[]? devices;
    private Dictionary<Guid, string> deviceStatus = new Dictionary<Guid, string>();

    private string newDeviceName = "";
    private string writeKey = "";

    private async Task AddDevice()
    {
        if (!string.IsNullOrWhiteSpace (newDeviceName)) {
        var device = new Hub.Data.Device {
            Id = Guid.NewGuid(),
            Name = newDeviceName.Trim() };
        await db.AddDeviceAsync(device);
        devices = await db.GetDevicesAsync();
        newDeviceName = "";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task Refresh()
    {
        devices = await db.GetDevicesAsync();
        StateHasChanged();
        foreach (var device in devices)
        {
            deviceStatus[device.Id] = await db.GetOnlineDisplayStatusAsync(device.Id, db);
            StateHasChanged();
        }
    }
}

