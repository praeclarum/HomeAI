@page "/devices/{id}"

@inject HomeDatabase db;

<PageTitle>@device?.Name</PageTitle>

<h1>@device?.Name</h1>

<p>Id:&nbsp;<strong>@(Guid.Parse(Id).ToString())</strong></p>

<DeviceInfoView DeviceInfo="@deviceInfo" />

<div>
    <p>Key: <input type="password" @bind="@writeKey" /></p>
    @if (Secrets.CanWriteWithKey(writeKey))
    {   
        <button @onclick=DeleteAllEventsCheck>Delete All Events</button>
    }
    @if (tryingToDelete)
    {
        <p>Are you sure? <button @onclick=DeleteAllEvents>Yes</button> <button @onclick=CancelDelete>No</button></p>
    }
</div>

@if (events == null)
{
    <p><em>Loading Events...</em></p>
}
else
{
    <button @onclick=Refresh>Refresh</button>
    <EventList Events="events" />
}

@code {
    [Parameter]
    public string Id { get; set; } = "";

    private DataLogEvent[]? events;

    private Hub.Data.Device? device = null;

    DeviceInfo? deviceInfo = null;

    bool tryingToDelete = false;

    string writeKey = "";

    protected override async Task OnInitializedAsync()
    {
        var deviceId = Guid.Parse(Id);
        device = await db.GetDeviceAsync(deviceId);
        deviceInfo = await DeviceInfo.LoadAsync(deviceId, 12*60, db);
        await Refresh();
    }

    async Task Refresh()
    {
        events = await db.GetEventsForDeviceAsync(Guid.Parse(Id), 100);
        StateHasChanged();
    }

    async Task DeleteAllEventsCheck()
    {
        tryingToDelete = true;
        StateHasChanged();
    }

    async Task DeleteAllEvents()
    {
        await db.DeleteAllEventsForDeviceAsync(Guid.Parse(Id));
        tryingToDelete = false;
        await Refresh();
    }

    void CancelDelete()
    {
        tryingToDelete = false;
    }
}
